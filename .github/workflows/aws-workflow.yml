name: AWS Workflow

on:
  workflow_call:
    inputs:
      WORKING_DIRECTORY:
        description: "working directory"
        type: string
        required: true
    outputs:
      endpoint: 
        description: "database endpoint"
        value: "${{ jobs.tf_deployment.outputs.endpoint }}"
      tunnel1_address:
        description: "tunnel1 address"
        value: "${{ jobs.tf_deployment.outputs.tunnel1_address }}"
      tunnel2_address:
        description: "tunnel2 address"
        value: "${{ jobs.tf_deployment.outputs.tunnel2_address }}"
      tunnel1_local_address:
        description: "tunnel1 local address"
        value: "${{ jobs.tf_deployment.outputs.tunnel1_local_address }}"
      tunnel2_local_address:
        description: "tunnel2 local address"
        value: "${{ jobs.tf_deployment.outputs.tunnel2_local_address }}"
      tunnel1_cidr:
        description: "tunnel1 cidr"
        value: "${{ jobs.tf_deployment.outputs.tunnel1_cidr }}"
      tunnel2_cidr:
        description: "tunnel1 cidr"
        value: "${{ jobs.tf_deployment.outputs.tunnel2_cidr }}"
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

env:
  WORKING_DIRECTORY: ${{ inputs.WORKING_DIRECTORY }}

permissions:
  id-token: write
  contents: read

jobs:
  tf_deployment:
    runs-on: ubuntu-latest
    outputs:
      endpoint: ${{ steps.vars.outputs.endpoint }}
      tunnel1_address: ${{ steps.vars.outputs.tunnel1_address }}
      tunnel2_address: ${{ steps.vars.outputs.tunnel2_address }}
      tunnel1_local_address: ${{ steps.vars.outputs.tunnel1_local_address }}
      tunnel2_local_address: ${{ steps.vars.outputs.tunnel2_local_address }}
      tunnel1_cidr: ${{ steps.vars.outputs.tunnel1_cidr }}
      tunnel2_cidr: ${{ steps.vars.outputs.tunnel2_cidr }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Config credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT}}:role/${{secrets.AWS_ROLE}}
        role-session-name: ${{secrets.AWS_ROLE}}
        aws-region: us-east-2
    - name: Setup Terraform CLI
      uses: hashicorp/setup-terraform@v2.0.2

    - name: Set DB Creds
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        sed -ie "s/{__NAME__}/${{ secrets.DB_NAME }}/g" main.tf
        sed -ie "s/{__USER__}/${{ secrets.DB_USER }}/g" main.tf
        sed -ie "s/{__PASS__}/${{ secrets.DB_PASS }}/g" main.tf
        sed -ie "s/{__PROJECT_ID__}/${{ secrets.PROJECT_ID }}/g" main.tf
        sed -ie "s/{__VPC_ID__}/${{ secrets.VPC_ID }}/g" main.tf
        sed -ie "s/{__GCP_IP__}/${{ secrets.GCP_IP }}/g" main.tf
        sed -ie "s/{__GCP_ASN__}/${{ secrets.GCP_ASN }}/g" main.tf
        sed -ie "s/{__AWS_ASN__}/${{ secrets.AWS_ASN }}/g" main.tf
        sed -ie "s/{__SHARED_SECRET__}/${{ secrets.SHARED_SECRET }}/g" main.tf
    - name: Terraform init
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        terraform init
        terraform plan
        #terraform destroy -auto-approve
        terraform apply -auto-approve
      env:
        AWS_CREDENTIALS: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    - name: Terraform vars
      id: vars
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        echo -n "endpoint is: "
        echo $(terraform state pull | grep endpoint | awk -F ':' '{print $2}' | tr -d '",[]')
        echo -n "tunnel_address1 is: "
        echo $(terraform state pull | grep tunnel1_address | awk -F ':' '{print $2}' | tr -d '",')
        echo -n "tunnel_address2 is: "
        echo $(terraform state pull | grep tunnel2_address | awk -F ':' '{print $2}' | tr -d '",')
        echo "endpoint=$(echo $(terraform state pull | grep endpoint | awk -F ':' '{print $2}' | tr -d '",[]' | sed 's/${{ secrets.DB_USER }}//g'))" >> $GITHUB_OUTPUT
        echo "tunnel1_address=$(echo $(terraform state pull | grep tunnel1_address | awk -F ':' '{print $2}' | tr -d '",'))" >> $GITHUB_OUTPUT
        echo "tunnel2_address=$(echo $(terraform state pull | grep tunnel2_address | awk -F ':' '{print $2}' | tr -d '",'))" >> $GITHUB_OUTPUT
        echo "tunnel1_local_address=$(echo $(terraform state pull | grep tunnel1_vgw_inside_addres | awk -F ':' '{print $2}' | tr -d '",'))" >> $GITHUB_OUTPUT
        echo "tunnel2_local_address=$(echo $(terraform state pull | grep tunnel2_vgw_inside_addres | awk -F ':' '{print $2}' | tr -d '",'))" >> $GITHUB_OUTPUT
        echo "tunnel1_cidr=$(echo $(terraform state pull | grep tunnel1_inside_cidr | awk -F ':' '{print $2}' | tr -d '",'))" >> $GITHUB_OUTPUT
        echo "tunnel2_cidr=$(echo $(terraform state pull | grep tunnel2_inside_cidr | awk -F ':' '{print $2}' | tr -d '",'))" >> $GITHUB_OUTPUT
      env:
        AWS_CREDENTIALS: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
